There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.


-------------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def uniquePaths(self, m: int, n: int,memo={}) -> int:
        key=str(m)+','+str(n)
        if key in memo:
            return memo[key]
        if m==0 or n==0:
            return 0
        if m==1 and n==1:
            return 1
        memo[key]=self.uniquePaths(m-1,n,memo)+self.uniquePaths(m,n-1,memo)
        return memo[key]
